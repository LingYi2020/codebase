<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE en-export SYSTEM "http://xml.evernote.com/pub/evernote-export2.dtd">
<en-export export-date="20210106T150201Z" application="Evernote/Windows" version="6.x">
<note><title>day14</title><content><![CDATA[<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE en-note SYSTEM "http://xml.evernote.com/pub/enml2.dtd">

<en-note><div><span style="font-size: 16pt; color: rgb(173, 0, 0); font-weight: bold;">ES5常用API</span></div><div><br/></div><div><span style="font-size: 14pt;">ES 即 ECMAScript，是JavaScript的语言标准</span></div><div><span style="font-size: 14pt;">ES5 即&nbsp;</span><span style="font-size: 14pt;">ECMAScript 5，</span><span style="font-size: 14pt;">也称为 ECMAScript 2009</span></div><div><span style="font-size: 14pt; color: rgb(51, 51, 51); font-family: 微软雅黑;">ES5支持情况：</span><span style="font-size: 14pt; font-family: 微软雅黑;">ie9+, chrome 19+, safari 5+, firefox 4+, opera 12+</span></div><div><br/></div><div><span style="font-size: 14pt; font-weight: bold;">严格模式</span></div><div style="box-sizing: border-box; padding: 8px; font-family: Monaco, Menlo, Consolas, &quot;Courier New&quot;, monospace; font-size: 12px; color: rgb(51, 51, 51); border-radius: 4px; background-color: rgb(251, 250, 248); border: 1px solid rgba(0, 0, 0, 0.15);-en-codeblock:true;"><div><span style="font-size: 14pt; font-family: 微软雅黑;">除了正常运行模式，ECMAscript5添加了第二种运行模式：&quot;严格模式&quot;（strict mode）。</span></div><div><span style="font-size: 14pt; font-family: 微软雅黑;">顾名思义，这种模式使得Javascript在更严格的条件下运行。</span></div><div><br/></div><div><span style="font-size: 14pt; font-family: 微软雅黑;">设立&quot;严格模式&quot;的目的，主要有以下几个：</span></div><div><span style="font-size: 14pt; font-family: 微软雅黑;">&nbsp;&nbsp; &nbsp;消除JavaScript语法的一些不合理、不严谨之处，减少一些怪异行为;</span></div><div><span style="font-size: 14pt; font-family: 微软雅黑;">&nbsp;&nbsp; &nbsp;消除代码运行的一些不安全之处，保证代码运行的安全；</span></div><div><span style="font-size: 14pt; font-family: 微软雅黑;">&nbsp;&nbsp; &nbsp;提高编译器效率，增加运行速度；</span></div><div><span style="font-size: 14pt; font-family: 微软雅黑;">&nbsp;&nbsp; &nbsp;为未来新版本的JavaScript做好铺垫。</span></div><div><br/></div><div><span style="font-size: 14pt; font-family: 微软雅黑;">进入&quot;严格模式&quot;的标志：</span><span style="font-size: 14pt; font-family: 微软雅黑; color: rgb(173, 0, 0);">&quot;use strict&quot;;</span></div><div><br/></div><div><span style="font-size: 14pt; font-family: 微软雅黑;">将 &quot;use strict&quot;; 放在脚本文件的第一行，则整个脚本都将以&quot;严格模式&quot;运行。</span></div><div><span style="font-size: 14pt; font-family: 微软雅黑; color: rgb(45, 79, 201);">&lt;script&gt;</span></div><div><span style="font-size: 14pt; font-family: 微软雅黑; color: rgb(45, 79, 201);">&nbsp; &nbsp;&quot;use strict&quot;;</span></div><div><span style="font-size: 14pt; font-family: 微软雅黑; color: rgb(45, 79, 201);">&nbsp; &nbsp;console.log(&quot;全局严格模式。&quot;);</span></div><div><span style="font-size: 14pt; font-family: 微软雅黑; color: rgb(45, 79, 201);">&lt;/script&gt;</span></div><div><br/></div><div><span style="font-size: 14pt; font-family: 微软雅黑;">将&quot;use strict&quot;放在函数体的第一行，则整个函数以&quot;严格模式&quot;运行。</span></div><div><span style="font-size: 14pt; font-family: 微软雅黑; color: rgb(45, 79, 201);">function strict(){</span></div><div><span style="font-size: 14pt; font-family: 微软雅黑; color: rgb(45, 79, 201);">&nbsp; &nbsp;&quot;use strict&quot;;</span></div><div><span style="font-size: 14pt; font-family: 微软雅黑; color: rgb(45, 79, 201);">&nbsp; &nbsp;console.log(&quot;局部严格模式。&quot;);</span></div><div><span style="font-size: 14pt; font-family: 微软雅黑; color: rgb(45, 79, 201);">}</span></div><div><br/></div><div><span style="font-size: 14pt; font-family: 微软雅黑;">ES5严格模式的限制规范：</span></div><div><br/></div><div><span style="font-size: 14pt; font-family: 微软雅黑;">1.变量声明必须使用var，否则报错</span></div><div><br/></div><div><span style="font-size: 14pt; font-family: 微软雅黑;">2.对不合理的操作显示报错，不再做静默失败处理</span></div><div><span style="font-size: 14pt; font-family: 微软雅黑;">NaN = 123;</span></div><div><span style="font-size: 14pt; font-family: 微软雅黑;">var abc = &apos;a12&apos;;</span></div><div><span style="font-size: 14pt; font-family: 微软雅黑;">delete abc;</span></div><div><span style="font-size: 14pt; font-family: 微软雅黑;">abc.length = 5;</span></div><div><br/></div><div><span style="font-size: 14pt; font-family: 微软雅黑;">3.禁止对象属性重名（IE）</span></div><div><br/></div><div><span style="font-size: 14pt; font-family: 微软雅黑;">4.禁止函数参数重名</span></div><div><br/></div><div><span style="font-size: 14pt; font-family: 微软雅黑;">5.禁止使用以0开头的八进制数字</span></div><div><span style="font-size: 14pt; font-family: 微软雅黑;">ES6新的语法标准，八进制以0o来表示，与16进制的0x形成统一的语法格式</span></div><div><br/></div><div><span style="font-size: 14pt; font-family: 微软雅黑;">6.禁止使用with语句</span></div><div><br/></div><div><span style="font-size: 14pt; font-family: 微软雅黑;">7.强制为eval创建新作用域</span></div><div><span style="font-size: 14pt; font-family: 微软雅黑;">eval() 函数计算 JavaScript 字符串，并把它作为脚本代码来执行。</span></div><div><span style="font-size: 14pt; font-family: 微软雅黑;">如果参数是一个表达式，eval() 函数将执行表达式。</span></div><div><span style="font-size: 14pt; font-family: 微软雅黑;">如果参数是Javascript语句，eval()将执行 Javascript 语句。</span></div><div><span style="font-size: 14pt; font-family: 微软雅黑;">严格模式为JavaScript程序创建了第三种作用域：eval作用域</span></div><div><br/></div><div><span style="font-size: 14pt; font-family: 微软雅黑;">8.arguments不再追踪参数变化</span></div><div><span style="font-size: 14pt; font-family: 微软雅黑;">var x = 1</span></div><div><span style="font-size: 14pt; font-family: 微软雅黑;">function fn1(x) {</span></div><div><span style="font-size: 14pt; font-family: 微软雅黑;">&nbsp;&nbsp; &nbsp;x = 2;</span></div><div><span style="font-size: 14pt; font-family: 微软雅黑;">&nbsp;&nbsp; &nbsp;arguments[0] = 3;</span></div><div><span style="font-size: 14pt; font-family: 微软雅黑;">&nbsp;&nbsp; &nbsp;alert(x);</span></div><div><span style="font-size: 14pt; font-family: 微软雅黑;">}</span></div><div><span style="font-size: 14pt; font-family: 微软雅黑;">fn1(4);</span></div><div><br/></div><div><span style="font-size: 14pt; font-family: 微软雅黑;">9.禁止使用arguments.callee</span></div><div><span style="font-size: 14pt; font-family: 微软雅黑; color: rgb(168, 168, 168);">// 在匿名的递归函数中</span></div><div><span style="font-size: 14pt; font-family: 微软雅黑;">var factorialArray = [1, 2, 3, 4, 5].map(function(n) {</span></div><div><span style="font-size: 14pt; font-family: 微软雅黑;">return (n &lt; 2) ? 1 : arguments.callee(n - 1) * n;</span></div><div><span style="font-size: 14pt; font-family: 微软雅黑;">});</span></div><div><span style="font-size: 14pt; font-family: 微软雅黑;">console.log(factorialArray);</span></div><div><br/></div><div><span style="font-size: 14pt; font-family: 微软雅黑;">10.函数中禁止</span><span style="font-size: 14pt; font-family: 微软雅黑;">this指向全局对象window，this变成undefined</span></div><div><br/></div><div><span style="font-size: 14pt; font-family: 微软雅黑;">11.函数必须声明在整个脚本或函数层面</span></div><div><br/></div><div><span style="font-size: 14pt; font-family: 微软雅黑;">12.新增一些保留字，不能使用他们作为标识符命名</span></div><div><span style="font-size: 14pt; font-family: 微软雅黑;">implements, interface, let, package, private, protected, public, static, yield</span></div><div><span style="color: rgb(51, 51, 51); font-size: 14pt; font-family: 微软雅黑;">......</span></div></div><div><span style="font-size: 14pt;">&nbsp;</span></div><div><br/></div><div><span style="font-size: 14pt; font-weight: bold;">Array扩展</span></div><div style="box-sizing: border-box; padding: 8px; font-family: Monaco, Menlo, Consolas, &quot;Courier New&quot;, monospace; font-size: 12px; color: rgb(51, 51, 51); border-radius: 4px; background-color: rgb(251, 250, 248); border: 1px solid rgba(0, 0, 0, 0.15);-en-codeblock:true;"><div><span style="font-size: 14pt; font-family: 微软雅黑;">indexOf() 方法</span><span style="font-size: 14pt; font-family: 微软雅黑;">返回指定元素在数</span><span style="font-size: 14pt; font-family: 微软雅黑;">组中第一次出现的索引，不存在则返回 -1</span></div><div><br/></div><div><span style="font-size: 14pt; font-family: 微软雅黑;">lastIndexOf() 方法</span><span style="font-size: 14pt; font-family: 微软雅黑;">返回指定元素在数组中最后一次出现的索引，不存在则返回 -1</span></div><div><br/></div><div><span style="font-size: 14pt; font-family: 微软雅黑;">forEach() 方法为每个元素执行对应的方法，无返回值</span></div><div><br/></div><div><span style="font-size: 14pt; font-family: 微软雅黑;">map() 方法对数组的每个元素进行一定操作后，返回一个新的数组</span></div><div><br/></div><div><span style="font-size: 14pt; font-family: 微软雅黑;">filter() 方法返回一个新的数组，新数组中的元素是通过检查指定数组中满足条件的所有元素</span></div><div><br/></div><div><span style="font-size: 14pt; font-family: 微软雅黑;">some()&nbsp;用于检测数组中的元素是否满足指定条件，有一项满足条件就返回true</span></div><div><br/></div><div><span style="font-size: 14pt; font-family: 微软雅黑;">every()&nbsp;判断数组中每一项都是否满足条件，只有所有项都满足条件，才会返回true</span></div><div><br/></div><div><span style="font-size: 14pt; font-family: 微软雅黑;">reduce() 方法都会实现迭代数组的所有项，然后构建一个最终返回的值</span></div><div><span style="font-size: 14pt; font-family: 微软雅黑;">方法接收两个参数：一个在每一项上调用的函数和（可选的）作为归并基础的初始值。</span></div><div><span style="font-size: 14pt; font-family: 微软雅黑;">回调函数接收 4 个参数：前一个值、当前值、当前项的索引和数组对象。</span></div><div><span style="font-size: 14pt; font-family: 微软雅黑;">这个函数返回的任何值都会作为第一个参数自动传给下一项。</span></div><div><span style="font-family: 微软雅黑; font-size: 14pt;">第一次迭代发生时，第一个参数是初始值</span><span style="font-family: 微软雅黑; font-size: 14pt;">，第二个参数就是数组的第</span><span style="font-family: 微软雅黑; font-size: 14pt;">一项。</span></div><div><span style="font-size: 14pt; font-family: 微软雅黑;">语法：array.reduce(function (previous,current,index,arr){ },initVal);</span></div><div><span style="font-size: 14pt; font-family: 微软雅黑; color: rgb(168, 168, 168);">// 数组去重</span></div><div><span style="font-size: 14pt; font-family: 微软雅黑; color: rgb(45, 79, 201);">var arr = [1,2,3,4,3,2,1];</span></div><div><span style="font-size: 14pt; font-family: 微软雅黑; color: rgb(45, 79, 201);">var res = arr.reduce(function (pre,cur) {</span></div><div><span style="font-size: 14pt; font-family: 微软雅黑; color: rgb(45, 79, 201);">&nbsp;&nbsp;&nbsp;&nbsp;pre.indexOf(cur) === -1 &amp;&amp; pre.push(cur);</span></div><div><span style="font-size: 14pt; font-family: 微软雅黑; color: rgb(45, 79, 201);">&nbsp;&nbsp;&nbsp;&nbsp;return pre;</span></div><div><span style="font-size: 14pt; font-family: 微软雅黑; color: rgb(45, 79, 201);">},[]);</span></div><div><span style="font-size: 14pt; font-family: 微软雅黑; color: rgb(45, 79, 201);">console.log(res);</span><span style="font-size: 14pt; font-family: 微软雅黑;">&nbsp;</span><span style="font-size: 14pt; font-family: 微软雅黑; color: rgb(168, 168, 168);">// [1, 2, 3, 4]</span></div><div><br/></div><div><span style="font-size: 14pt; font-family: 微软雅黑;">Array.isArray() 方法检查对象是否为数组</span></div><div><span style="font-size: 14pt; font-family: 微软雅黑;">......</span></div></div><div><br/></div><div><br/></div><div><span style="font-size: 14pt; font-weight: bold;">Object扩展</span></div><div style="box-sizing: border-box; padding: 8px; font-family: Monaco, Menlo, Consolas, &quot;Courier New&quot;, monospace; font-size: 12px; color: rgb(51, 51, 51); border-radius: 4px; background-color: rgb(251, 250, 248); border: 1px solid rgba(0, 0, 0, 0.15);-en-codeblock:true;"><div><span style="font-size: 14pt; font-family: 微软雅黑;">返回指定对象的所有可枚举属性组成的数组</span></div><div><span style="font-size: 14pt; font-family: 微软雅黑; color: rgb(227, 0, 0);">Object.keys(object)</span></div><div><span style="font-size: 14pt; font-family: 微软雅黑; color: rgb(45, 79, 201);">var obj1 = {a: 123, b: 456, c: 789};</span></div><div><span style="font-size: 14pt; font-family: 微软雅黑; color: rgb(45, 79, 201);">var obj2 = {7: 123, 3: 456, 13: 789};</span></div><div><span style="font-size: 14pt; font-family: 微软雅黑; color: rgb(45, 79, 201);">console.log( Object.keys(obj1) );</span> <span style="font-size: 14pt; font-family: 微软雅黑; color: rgb(168, 168, 168);">// [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;]</span></div><div><span style="font-size: 14pt; font-family: 微软雅黑; color: rgb(45, 79, 201);">console.log( Object.keys(obj2) );</span> <span style="font-size: 14pt; font-family: 微软雅黑; color: rgb(168, 168, 168);">// [&quot;3&quot;, &quot;7&quot;, &quot;13&quot;]</span></div><div><br/></div><div><span style="font-size: 14pt; font-family: 微软雅黑; color: rgb(45, 79, 201);">for (var key in obj2){</span></div><div><span style="font-size: 14pt; font-family: 微软雅黑; color: rgb(45, 79, 201);">&nbsp;&nbsp; &nbsp;console.log(key);</span> <span style="font-size: 14pt; font-family: 微软雅黑; color: rgb(168, 168, 168);">// &apos;3&apos;&nbsp; &apos;7&apos;&nbsp; &apos;13&apos;</span></div><div><span style="font-size: 14pt; font-family: 微软雅黑; color: rgb(45, 79, 201);">}</span></div><div><br/></div><div><span style="font-size: 14pt; font-family: 微软雅黑;">返回指定对象的所有自身属性组成的数组（包括不可枚举属性）</span></div><div><span style="font-size: 14pt; font-family: 微软雅黑; color: rgb(227, 0, 0);">Object.getOwnPropertyNames(object)</span></div><div><span style="font-size: 14pt; font-family: 微软雅黑; color: rgb(45, 79, 201);">var obj1 = {a: 123, b: 456, c: 789};</span></div><div><span style="font-size: 14pt; font-family: 微软雅黑; color: rgb(45, 79, 201);">var obj2 = {7: 123, 3: 456, 13: 789};</span></div><div><span style="font-size: 14pt; font-family: 微软雅黑; color: rgb(45, 79, 201);">console.log( Object.getOwnPropertyNames(obj1) );</span> <span style="font-size: 14pt; font-family: 微软雅黑; color: rgb(168, 168, 168);">// [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;]</span></div><div><span style="font-size: 14pt; font-family: 微软雅黑; color: rgb(45, 79, 201);">console.log( Object.getOwnPropertyNames(obj2) );</span> <span style="font-size: 14pt; font-family: 微软雅黑; color: rgb(168, 168, 168);">// [&quot;3&quot;, &quot;7&quot;, &quot;13&quot;]</span></div><div><br/></div><div><span style="font-size: 14pt; font-family: 微软雅黑;">创建新对象并指定其原型，返回新对象</span></div><div><span style="font-size: 14pt; font-family: 微软雅黑; color: rgb(227, 0, 0);">Object.create(prototype, [descriptors])</span></div><div><span style="font-size: 14pt; font-family: 微软雅黑;">prototype：新对象的原型对象，不能省略，可以为 null</span></div><div><span style="font-size: 14pt; font-family: 微软雅黑;">[descriptors]：可选，为新对象指定新的属性, 并对属性进行描述</span></div><div><span style="font-size: 14pt; font-family: 微软雅黑; color: rgb(45, 79, 201);">var obj = {a: 123, b: 456};</span></div><div><span style="font-size: 14pt; font-family: 微软雅黑; color: rgb(45, 79, 201);">var obj1 = Object.create(null);</span> <span style="font-size: 14pt; font-family: 微软雅黑; color: rgb(168, 168, 168);">// 没有继承的属性</span></div><div><span style="font-size: 14pt; font-family: 微软雅黑; color: rgb(45, 79, 201);">var obj2 = Object.create(obj);</span> <span style="font-size: 14pt; font-family: 微软雅黑; color: rgb(168, 168, 168);">// 继承了obj对象</span></div><div><br/></div><div><span style="font-size: 14pt; font-family: 微软雅黑;">返回对象的原型</span></div><div><span style="font-size: 14pt; font-family: 微软雅黑; color: rgb(227, 0, 0);">Object.getPrototypeOf(object)</span></div><div><span style="font-size: 14pt; font-family: 微软雅黑; color: rgb(45, 79, 201);">var proto = Object.getPrototypeOf(obj2);</span></div><div><font face="微软雅黑" style="font-size: 14pt;"><span style="color: rgb(45, 79, 201);">console.log(proto);&nbsp;</span><span style="color: rgb(168, 168, 168);">// {a: 123, b: 456}</span></font></div><div><span style="color: rgb(168, 168, 168);"><font face="微软雅黑" style="font-size: 14pt;"><br/></font></span></div><div><font face="微软雅黑" style="font-size: 14pt;">返回对象的属性的描述符(对象)</font></div><div><font color="#E30000" face="微软雅黑" style="font-size: 14pt;">Object.getOwnPropertyDescriptor(object, property)</font></div><div><span style="font-size: 14pt; font-family: 微软雅黑; color: rgb(168, 168, 168);"><br/></span></div><div><span style="font-size: 14pt; font-family: 微软雅黑;">直接在一个对象上定义一个新属性，或者修改一个对象的现有属性，并返回这个对象</span></div><div><span style="font-size: 14pt; font-family: 微软雅黑; color: rgb(227, 0, 0);">Object.defineProperty(object, property, descriptor)</span></div><div><span style="font-size: 14pt; font-family: 微软雅黑;">object&nbsp;要在其上定义属性的对象。</span></div><div><span style="font-size: 14pt; font-family: 微软雅黑;">property&nbsp;要定义或修改的属性的名称。</span></div><div><span style="font-size: 14pt; font-family: 微软雅黑;">descriptor&nbsp;将被定义或修改的属性描述符(对象)</span></div><div><br/></div><div><span style="font-size: 14pt; font-family: 微软雅黑;">descriptor&nbsp;</span><span style="font-size: 14pt; font-family: 微软雅黑;">属性描述符具有以下可选键值：</span></div><div><span style="font-size: 14pt; font-family: 微软雅黑; color: rgb(45, 79, 201);">configurable</span></div><div><font face="微软雅黑" style="font-size: 14pt;">当且仅当该属性的 configurable 为 true 时，该属性描述符才能够被改变，同时该属性也能从对应的对象上被删除。新属性默认为 false。</font></div><div><span style="color: rgb(45, 79, 201);"><font face="微软雅黑" style="font-size: 14pt;">enumerable</font></span></div><div><font face="微软雅黑" style="font-size: 14pt;">当且仅当该属性的enumerable为true时，该属性才能够出现在对象的枚举属性中。新属性默认为 false。</font></div><div><span style="color: rgb(45, 79, 201);"><font face="微软雅黑" style="font-size: 14pt;">writable</font></span></div><div><font face="微软雅黑" style="font-size: 14pt;">当且仅当该属性的writable为true时，value才能被赋值运算符改变。新属性默认为 false。</font></div><div><span style="color: rgb(45, 79, 201);"><font face="微软雅黑" style="font-size: 14pt;">value</font></span></div><div><font face="微软雅黑" style="font-size: 14pt;">该属性对应的值。可以是任何有效的 JavaScript 值（数值，对象，函数等）。新属性默认为</font> <span style="font-family: 微软雅黑; font-size: 14pt;">undefined。</span></div><div><br/></div><div><span style="font-size: 14pt; font-family: 微软雅黑; color: rgb(45, 79, 201);">var obj1 = Object.defineProperty({},&apos;abc&apos;,{</span></div><div><span style="font-size: 14pt; font-family: 微软雅黑; color: rgb(45, 79, 201);">&nbsp;&nbsp; &nbsp;configurable: true,</span></div><div><span style="font-size: 14pt; font-family: 微软雅黑; color: rgb(45, 79, 201);">&nbsp;&nbsp; &nbsp;enumerable: true,</span></div><div><span style="font-size: 14pt; font-family: 微软雅黑; color: rgb(45, 79, 201);">&nbsp;&nbsp; &nbsp;writable: true,&nbsp;</span><span style="font-size: 14pt; font-family: 微软雅黑; color: rgb(168, 168, 168);">// 默认值false</span></div><div><span style="font-size: 14pt; font-family: 微软雅黑; color: rgb(45, 79, 201);">&nbsp;&nbsp; &nbsp;value: &apos;123&apos;</span></div><div><span style="font-size: 14pt; font-family: 微软雅黑; color: rgb(45, 79, 201);">});</span></div><div><span style="font-size: 14pt; font-family: 微软雅黑; color: rgb(45, 79, 201);">obj1.abc = 456;</span></div><div><span style="font-size: 14pt; font-family: 微软雅黑; color: rgb(45, 79, 201);">console.log(obj1.abc);</span></div><div><br/></div><div><span style="font-family: 微软雅黑; font-size: 14pt;">对</span><span style="font-family: 微软雅黑; font-size: 14pt;">象访问器 属性</span> <span style="font-family: 微软雅黑; font-size: 14pt; color: rgb(45, 79, 201);">Getter</span> <span style="font-family: 微软雅黑; font-size: 14pt;">和</span> <span style="font-family: 微软雅黑; font-size: 14pt; color: rgb(45, 79, 201);">Setter，</span><span style="font-size: 14pt; font-family: 微软雅黑;">ES5 允许使用类似于获取或设置属性的语法来定义对象方法。</span></div><div><span style="font-size: 14pt; font-family: 微软雅黑; color: rgb(45, 79, 201);">get</span></div><div><span style="font-size: 14pt; font-family: 微软雅黑;">一个给属性提供 getter 的方法，如果没有 getter 则为 undefined。当访问该属性时，该方法会被执行，默认为 undefined。</span></div><div><span style="font-size: 14pt; font-family: 微软雅黑; color: rgb(45, 79, 201);">set</span></div><div><span style="font-family: 微软雅黑; font-size: 14pt;">一个给属性提供 setter 的方法，如果没有 setter 则为 undefined。当属性值修改时，触发执行</span><span style="font-family: 微软雅黑; font-size: 14pt;">该方法。该方法将接受唯一参数，即该属性新的参数值。默认为 undefined。</span></div><div><br/></div><div><span style="font-size: 14pt; font-family: 微软雅黑; color: rgb(45, 79, 201);">var obj3 = {</span></div><div><span style="font-size: 14pt; font-family: 微软雅黑; color: rgb(45, 79, 201);">&nbsp;&nbsp; &nbsp;name: &apos;xm&apos;,</span></div><div><span style="font-size: 14pt; font-family: 微软雅黑; color: rgb(45, 79, 201);">&nbsp;&nbsp; &nbsp;age: 18,</span></div><div><span style="font-size: 14pt; font-family: 微软雅黑; color: rgb(45, 79, 201);">&nbsp;&nbsp; &nbsp;say: function (){</span></div><div><span style="font-size: 14pt; font-family: 微软雅黑; color: rgb(45, 79, 201);">&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;alert(&apos;大家好&apos;);</span></div><div><span style="font-size: 14pt; font-family: 微软雅黑; color: rgb(45, 79, 201);">&nbsp;&nbsp; &nbsp;}</span></div><div><span style="font-size: 14pt; font-family: 微软雅黑; color: rgb(45, 79, 201);">}</span></div><div><span style="font-size: 14pt; font-family: 微软雅黑; color: rgb(45, 79, 201);">Object.defineProperty(obj3,&apos;age&apos;,{</span></div><div><span style="font-size: 14pt; font-family: 微软雅黑; color: rgb(45, 79, 201);">&nbsp;&nbsp; &nbsp;</span><span style="font-size: 14pt; font-family: 微软雅黑; color: rgb(168, 168, 168);">// 是否可配置(枚举、可写、删除)</span></div><div><span style="font-size: 14pt; font-family: 微软雅黑; color: rgb(45, 79, 201);">&nbsp;&nbsp; &nbsp;configurable: true,</span></div><div><span style="font-size: 14pt; font-family: 微软雅黑; color: rgb(45, 79, 201);">&nbsp;&nbsp; &nbsp;</span><span style="font-size: 14pt; font-family: 微软雅黑; color: rgb(168, 168, 168);">// 是否可枚举属性（遍历属性）</span></div><div><span style="font-size: 14pt; font-family: 微软雅黑; color: rgb(45, 79, 201);">&nbsp;&nbsp; &nbsp;enumerable: true,</span></div><div><span style="font-size: 14pt; font-family: 微软雅黑; color: rgb(45, 79, 201);">&nbsp;&nbsp; &nbsp;set(value) {</span></div><div><span style="font-size: 14pt; font-family: 微软雅黑; color: rgb(45, 79, 201);">&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;console.log(&apos;触发setter函数&apos;);</span></div><div><span style="font-size: 14pt; font-family: 微软雅黑; color: rgb(45, 79, 201);">&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;this._age = value;&nbsp;</span><span style="font-size: 14pt; font-family: 微软雅黑; color: rgb(168, 168, 168);">//用中间介质变量this._age，不能直接用this.age</span></div><div><span style="font-size: 14pt; font-family: 微软雅黑; color: rgb(45, 79, 201);">&nbsp;&nbsp; &nbsp;},</span></div><div><span style="font-size: 14pt; font-family: 微软雅黑; color: rgb(45, 79, 201);">&nbsp;&nbsp; &nbsp;get() {</span></div><div><span style="font-size: 14pt; font-family: 微软雅黑; color: rgb(45, 79, 201);">&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;console.log(&apos;触发getter函数&apos;);</span></div><div><span style="font-size: 14pt; font-family: 微软雅黑; color: rgb(45, 79, 201);">&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;return this._age;&nbsp;</span><span style="font-size: 14pt; font-family: 微软雅黑; color: rgb(168, 168, 168);">//用中间介质变量this._age，不能直接用this.age</span></div><div><span style="font-size: 14pt; font-family: 微软雅黑; color: rgb(45, 79, 201);">&nbsp;&nbsp; &nbsp;}</span></div><div><span style="font-size: 14pt; font-family: 微软雅黑; color: rgb(45, 79, 201);">});</span></div><div><span style="font-size: 14pt; font-family: 微软雅黑; color: rgb(45, 79, 201);">obj3.age = 22;</span></div><div><span style="font-size: 14pt; font-family: 微软雅黑; color: rgb(45, 79, 201);">console.log(obj3.age);</span></div><div><span style="font-size: 14pt; font-family: 微软雅黑; color: rgb(45, 79, 201);">console.log( Object.getOwnPropertyDescriptor(obj3,&apos;age&apos;) );</span></div><div><br/></div><div><span style="font-size: 14pt; font-family: 微软雅黑; color: rgb(227, 0, 0);">注意：一个描述符不能同时</span><span style="font-size: 14pt; font-family: 微软雅黑; color: rgb(227, 0, 0);">有(</span><span style="font-size: 14pt; font-family: 微软雅黑; color: rgb(227, 0, 0);">writable、</span><span style="font-size: 14pt; font-family: 微软雅黑; color: rgb(227, 0, 0);">val</span><span style="font-size: 14pt; font-family: 微软雅黑; color: rgb(227, 0, 0);">ue)和(get、set)关键字。</span></div><div><br/></div><div><span style="font-size: 14pt; font-family: 微软雅黑;">添加或更改多个对象属性</span></div><div><span style="font-size: 14pt; font-family: 微软雅黑; color: rgb(227, 0, 0);">Object.defineProperties(object, descriptors)</span></div></div><div><span style="font-size: 14pt;">&nbsp;</span></div><div><br/></div><div><span style="font-size: 14pt; font-weight: bold;">String扩展</span></div><div style="box-sizing: border-box; padding: 8px; font-family: Monaco, Menlo, Consolas, &quot;Courier New&quot;, monospace; font-size: 12px; color: rgb(51, 51, 51); border-radius: 4px; background-color: rgb(251, 250, 248); border: 1px solid rgba(0, 0, 0, 0.15);-en-codeblock:true;"><div><span style="font-size: 14pt; font-family: 微软雅黑;">String.trim() 删除字符串两端的空白字符。</span></div><div><span style="font-size: 14pt; font-family: 微软雅黑; color: rgb(45, 79, 201);">var str = &quot;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Hello World!&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;;</span></div><div><span style="font-size: 14pt; font-family: 微软雅黑; color: rgb(45, 79, 201);">console.log( str.trim() );</span> <span style="font-size: 14pt; font-family: 微软雅黑; color: rgb(168, 168, 168);">// &apos;Hello World!&apos;</span></div></div><div><br/></div><div><br/></div><div><span style="font-size: 14pt; font-weight: bold;">Date扩展</span></div><div style="box-sizing: border-box; padding: 8px; font-family: Monaco, Menlo, Consolas, &quot;Courier New&quot;, monospace; font-size: 12px; color: rgb(51, 51, 51); border-radius: 4px; background-color: rgb(251, 250, 248); border: 1px solid rgba(0, 0, 0, 0.15);-en-codeblock:true;"><div><span style="font-size: 14pt; font-family: 微软雅黑;">Date.now() 返回自时间起点到当前的毫秒数</span></div><div><span style="font-size: 14pt; font-family: 微软雅黑;">Date.now() 的返回与在 Date 对象上执行 getTime() 的结果相同</span></div><div><br/></div><div><span style="font-size: 14pt; font-family: 微软雅黑; color: rgb(45, 79, 201);">console.log(&nbsp;Date.now() );</span> <span style="font-size: 14pt; font-family: 微软雅黑; color: rgb(168, 168, 168);">//&nbsp;</span><a href="tel:1566646195347" style="font-size: 14pt; font-family: 微软雅黑; color: rgb(168, 168, 168);">1566646195347</a></div><div><span style="font-size: 14pt; font-family: 微软雅黑; color: rgb(45, 79, 201);">console.log( new Date().getTime() );</span> <span style="font-size: 14pt; font-family: 微软雅黑; color: rgb(168, 168, 168);">//</span> <a href="tel:1566646195347" style="font-size: 14pt; font-family: 微软雅黑; color: rgb(168, 168, 168);">1566646195347</a></div></div><div><br/></div><div><br/></div><div><span style="font-size: 14pt; font-weight: bold;">Function扩展</span></div><div style="box-sizing: border-box; padding: 8px; font-family: Monaco, Menlo, Consolas, &quot;Courier New&quot;, monospace; font-size: 12px; color: rgb(51, 51, 51); border-radius: 4px; background-color: rgb(251, 250, 248); border: 1px solid rgba(0, 0, 0, 0.15);-en-codeblock:true;"><div><span style="font-size: 14pt; font-family: 微软雅黑;">bind(obj) 将函数内的this绑定为obj, 并将函数返回</span></div><div><br/></div><div><span style="font-size: 14pt; font-family: 微软雅黑; color: rgb(45, 79, 201);">var obj = {abc: 123};</span></div><div><span style="font-size: 14pt; font-family: 微软雅黑; color: rgb(45, 79, 201);">setTimeout(function (){</span></div><div><span style="font-size: 14pt; font-family: 微软雅黑; color: rgb(45, 79, 201);">&nbsp;&nbsp; &nbsp;console.log(this);</span> <span style="font-size: 14pt; font-family: 微软雅黑; color: rgb(168, 168, 168);">// obj</span></div><div><span style="font-size: 14pt; font-family: 微软雅黑; color: rgb(45, 79, 201);">}.bind(obj),1000);</span></div></div><div><br/></div><div><br/></div><div><span style="font-size: 14pt; font-weight: bold;">JSON方法</span></div><div style="box-sizing: border-box; padding: 8px; font-family: Monaco, Menlo, Consolas, &quot;Courier New&quot;, monospace; font-size: 12px; color: rgb(51, 51, 51); border-radius: 4px; background-color: rgb(251, 250, 248); border: 1px solid rgba(0, 0, 0, 0.15);-en-codeblock:true;"><div><span style="font-size: 14pt; font-family: 微软雅黑;">在数据传输流程中，JSON是以文本(即字符串)的形式传递</span></div><div><br/></div><div><span style="font-size: 14pt; font-family: 微软雅黑; color: rgb(45, 79, 201);">var json1 = &apos;{ &quot;name&quot;: &quot;cxh&quot;, &quot;sex&quot;: &quot;man&quot; }&apos;;</span> <span style="font-size: 14pt; font-family: 微软雅黑; color: rgb(168, 168, 168);">// JSON字符串</span></div><div><span style="font-size: 14pt; font-family: 微软雅黑; color: rgb(45, 79, 201);">var json2 = { &quot;name&quot;: &quot;cxh&quot;, &quot;sex&quot;: &quot;man&quot; };</span> <span style="font-size: 14pt; font-family: 微软雅黑; color: rgb(168, 168, 168);">//&nbsp;&nbsp;JSON对 象</span></div><div><br/></div><div><span style="font-size: 14pt; font-family: 微软雅黑;">JSON.parse() 用于将JSON字符串转换为JSON对象</span></div><div><span style="font-size: 14pt; font-family: 微软雅黑; color: rgb(45, 79, 201);">var obj = JSON.parse(json1);</span> <span style="font-size: 14pt; font-family: 微软雅黑; color: rgb(168, 168, 168);">// 需严格的json格式</span></div><div><br/></div><div><span style="font-size: 14pt; font-family: 微软雅黑;">JSON.stringify() 用于将JSON对象转换为JSON字符串</span></div><div><span style="font-size: 14pt; font-family: 微软雅黑; color: rgb(45, 79, 201);">var str = JSON.stringify(json2);</span></div></div><div><br/></div><div><br/></div><div><span style="font-size: 14pt; font-weight: bold;">classList对象</span></div><div style="box-sizing: border-box; padding: 8px; font-family: Monaco, Menlo, Consolas, &quot;Courier New&quot;, monospace; font-size: 12px; color: rgb(51, 51, 51); border-radius: 4px; background-color: rgb(251, 250, 248); border: 1px solid rgba(0, 0, 0, 0.15);-en-codeblock:true;"><div><span style="font-size: 14pt; font-family: 微软雅黑;">在新的API里，页面里的每个DOM节点上都有一个classList对象</span></div><div><span style="font-size: 14pt; font-family: 微软雅黑;">可以使用classList对象里面的方法新增、删除、修改及判断节点上的CSS类</span></div><div><br/></div><div><span style="font-size: 14pt; font-family: 微软雅黑;">classList对象一些很有用的属性方法：</span></div><div><span style="font-size: 14pt; font-family: 微软雅黑; color: rgb(45, 79, 201);">length</span><span style="font-size: 14pt; font-family: 微软雅黑;">&nbsp;&nbsp;类名个数</span></div><div><span style="font-size: 14pt; font-family: 微软雅黑; color: rgb(45, 79, 201);">item(index)</span><span style="font-size: 14pt; font-family: 微软雅黑;">&nbsp;&nbsp;获取类名</span></div><div><span style="font-size: 14pt; font-family: 微软雅黑; color: rgb(45, 79, 201);">add(class1,class2, ...)&nbsp;</span><span style="font-size: 14pt; font-family: 微软雅黑;">&nbsp;添加类</span></div><div><span style="font-size: 14pt; font-family: 微软雅黑; color: rgb(45, 79, 201);">remove(class1,class2, ...)</span><span style="font-size: 14pt; font-family: 微软雅黑;">&nbsp;&nbsp;删除类</span></div><div><span style="font-size: 14pt; font-family: 微软雅黑; color: rgb(45, 79, 201);">contains(class)</span><span style="font-size: 14pt; font-family: 微软雅黑;">&nbsp;&nbsp;判断类</span></div><div><span style="font-size: 14pt; font-family: 微软雅黑; color: rgb(45, 79, 201);">toggle(class)</span><span style="font-size: 14pt; font-family: 微软雅黑;">&nbsp;&nbsp;反转类</span></div><div><span style="font-size: 14pt; font-family: 微软雅黑;">... ...</span></div></div><div><br/></div><div><br/></div><div><br/></div><div><br/></div><div><br/></div></en-note>]]></content><created>20210103T061153Z</created><updated>20210106T141952Z</updated><note-attributes><author>陶舒健</author><source>desktop.win</source><source-application>yinxiang.win32</source-application></note-attributes></note></en-export>
